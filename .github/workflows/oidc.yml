name: Build and Deploy GIS App to AWS (OIDC & Dynamic Config)

on:
  push:
    branches:
      - main

permissions:
  id-token: write    # Required for OIDC to assume AWS IAM role
  contents: read     # Required to checkout the repository code

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_TO_ASSUME }}
          aws-region: ap-south-1
          role-session-name: GISAppDeploySession

      - name: Fetch Dynamic AWS Configuration
        id: config
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=gis-app-server" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" --output text)
          echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Django image to ECR
        run: |
          TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-django:latest ./django-app
          docker tag ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-django:latest \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-django:$TAG
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-django:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-django:$TAG

      - name: Build, tag, and push GeoServer image to ECR
        run: |
          TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-geoserver:latest ./geoserver-config
          docker tag ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-geoserver:latest \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-geoserver:$TAG
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-geoserver:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-geoserver:$TAG

      - name: Build, tag, and push Nginx image to ECR
        run: |
          TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-nginx:latest ./nginx-config
          docker tag ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-nginx:latest \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-nginx:$TAG
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-nginx:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/gis-nginx:$TAG

      - name: Deploy to EC2 via SSM Session Manager
        uses: aws-actions/aws-ssm-send-command@v1
        with:
          instance-ids: ${{ env.EC2_INSTANCE_ID }}
          document-name: "AWS-RunShellScript"
          comment: "Deploy GIS app stack via docker-compose"
          parameters: >
            commands=[
              "#!/bin/bash",
              "cd /home/ubuntu/app",
              "export AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }}",
              "export AWS_REGION=ap-south-1",
              "docker-compose pull",
              "docker-compose up -d django geoserver nginx",
              "docker image prune -af  # Clean up unused images"
            ]
